<?php

namespace {{ namespace }};

use App\Http\Responses\ApiErrorResponse;
use App\Http\Responses\ApiSuccessResponse;
use {{ namespacedModel }};
use {{ rootNamespace }}Http\Controllers\Controller;
use {{ namespacedRequests }}
use Illuminate\Http\Response;
use Throwable;

class {{ class }} extends Controller
{
    public function __construct()
    {
        $this->authorizeResource({{ model }}::class);
    }

    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        try {
            ${{ modelVariable }}s = {{ model }}::all();
            return new ApiSuccessResponse(${{ modelVariable }}s, Response::HTTP_OK);
        } catch (Throwable $e) {
            return new ApiErrorResponse($e->getMessage(), $e, Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store({{ storeRequest }} $request)
    {
        try {
            ${{ modelVariable }} = {{ model }}::create($request->all());
            return new ApiSuccessResponse(${{ modelVariable }}, Response::HTTP_CREATED);
        } catch (Throwable $e) {
            return new ApiErrorResponse($e->getMessage(), $e, Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Display the specified resource.
     */
    public function show({{ model }} ${{ modelVariable }})
    {
        try {
            return new ApiSuccessResponse(${{ modelVariable }}, Response::HTTP_OK);
        } catch (Throwable $e) {
            return new ApiErrorResponse($e->getMessage(), $e, Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Update the specified resource in storage.
     */
    public function update({{ updateRequest }} $request, {{ model }} ${{ modelVariable }})
    {
        try {
            ${{ modelVariable }}->update($request->all());
            return new ApiSuccessResponse(${{ modelVariable }}, Response::HTTP_OK);
        } catch (Throwable $e) {
            return new ApiErrorResponse($e->getMessage(), $e, Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{ model }} ${{ modelVariable }})
    {
        try {
            ${{ modelVariable }}->delete();
            return new ApiSuccessResponse(${{ modelVariable }}, Response::HTTP_NO_CONTENT);
        } catch (Throwable $e) {
            return new ApiErrorResponse($e->getMessage(), $e, Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }
}
